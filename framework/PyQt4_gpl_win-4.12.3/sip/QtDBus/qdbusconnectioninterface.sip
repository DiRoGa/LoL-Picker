// qdbusconnectioninterface.sip generated by MetaSIP
//
// This file is part of the QtDBus Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDBusConnectionInterface : QDBusAbstractInterface
{
%TypeHeaderCode
#include <qdbusconnectioninterface.h>
%End

    QDBusConnectionInterface(const QDBusConnection &connection, QObject *parent /TransferThis/);
    virtual ~QDBusConnectionInterface();

public:
    enum ServiceQueueOptions
    {
        DontQueueService,
        QueueService,
        ReplaceExistingService,
    };

    enum ServiceReplacementOptions
    {
        DontAllowReplacement,
        AllowReplacement,
    };

    enum RegisterServiceReply
    {
        ServiceNotRegistered,
        ServiceRegistered,
        ServiceQueued,
    };

    QDBusReply<QStringList> registeredServiceNames() const /ReleaseGIL/;
    QDBusReply<bool> isServiceRegistered(const QString &serviceName) const /ReleaseGIL/;
    QDBusReply<QString> serviceOwner(const QString &name) const /ReleaseGIL/;
    QDBusReply<bool> unregisterService(const QString &serviceName) /ReleaseGIL/;
    QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString &serviceName, QDBusConnectionInterface::ServiceQueueOptions qoption = QDBusConnectionInterface::DontQueueService, QDBusConnectionInterface::ServiceReplacementOptions roption = QDBusConnectionInterface::DontAllowReplacement) /ReleaseGIL/;
    QDBusReply<unsigned int> servicePid(const QString &serviceName) const /ReleaseGIL/;
    QDBusReply<unsigned int> serviceUid(const QString &serviceName) const /ReleaseGIL/;
    QDBusReply<void> startService(const QString &name) /ReleaseGIL/;

signals:
    void serviceRegistered(const QString &service);
    void serviceUnregistered(const QString &service);
    void serviceOwnerChanged(const QString &name, const QString &oldOwner, const QString &newOwner);
    void callWithCallbackFailed(const QDBusError &error, const QDBusMessage &call);

protected:
%If (Qt_5_0_0 -)
    virtual void connectNotify(const QMetaMethod &);
%End
%If (- Qt_5_0_0)
    virtual void connectNotify(SIP_PYOBJECT /TypeHint="QT_SIGNAL"/) [void (const char *)];
%MethodCode
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QDBusConnectionInterface::connectNotify(sig) : sipCpp->connectNotify(sig));
        #else
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

%End
%If (Qt_5_0_0 -)
    virtual void disconnectNotify(const QMetaMethod &);
%End
%If (- Qt_5_0_0)
    virtual void disconnectNotify(SIP_PYOBJECT /TypeHint="QT_SIGNAL"/) [void (const char *)];
%MethodCode
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QDBusConnectionInterface::disconnectNotify(sig) : sipCpp->disconnectNotify(sig));
        #else
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

%End
};

%End
