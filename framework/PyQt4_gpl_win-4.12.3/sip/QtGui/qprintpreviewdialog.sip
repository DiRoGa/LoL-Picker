// qprintpreviewdialog.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)
%If (PyQt_PrintPreviewDialog)

class QPrintPreviewDialog : QDialog
{
%TypeHeaderCode
#include <qprintpreviewdialog.h>
%End

public:
    QPrintPreviewDialog(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    QPrintPreviewDialog(QPrinter *printer, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QPrintPreviewDialog();
    virtual void setVisible(bool visible);
%If (Qt_5_0_0 -)
    virtual void open();
%End
%If (Qt_4_5_0 - Qt_5_0_0)
    void open();
%End
%If (Qt_4_5_0 -)
    void open(QObject *receiver, SIP_PYOBJECT member /TypeHint="QT_SLOT"/);
%MethodCode
        const char *slot = pyqt4_qtgui_get_slot(a1);
        
        if (slot)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0, slot);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(1, a1);
        }
%End

%End
%If (Qt_4_5_0 -)
    void open(SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/);
%MethodCode
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt4_qtgui_get_connection_parts(a0, 0, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(receiver, slot_signature.constData());
            Py_END_ALLOW_THREADS
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

%End
%If (Qt_4_5_0 -)
    QPrinter *printer();
%End
%If (Qt_4_5_0 -)
    virtual void done(int result);
%End

signals:
    void paintRequested(QPrinter *printer);
};

%End
%End
