// qdeclarativeproperty.sip generated by MetaSIP
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativeProperty
{
%TypeHeaderCode
#include <qdeclarativeproperty.h>
%End

public:
    enum PropertyTypeCategory
    {
        InvalidCategory,
        List,
        Object,
        Normal,
    };

    enum Type
    {
        Invalid,
        Property,
        SignalProperty,
    };

    QDeclarativeProperty();
    QDeclarativeProperty(QObject *);
    QDeclarativeProperty(QObject *, QDeclarativeContext *);
    QDeclarativeProperty(QObject *, QDeclarativeEngine *);
    QDeclarativeProperty(QObject *, const QString &);
    QDeclarativeProperty(QObject *, const QString &, QDeclarativeContext *);
    QDeclarativeProperty(QObject *, const QString &, QDeclarativeEngine *);
    QDeclarativeProperty(const QDeclarativeProperty &);
    ~QDeclarativeProperty();
    bool operator==(const QDeclarativeProperty &) const;
    QDeclarativeProperty::Type type() const;
    bool isValid() const;
    bool isProperty() const;
    bool isSignalProperty() const;
    int propertyType() const;
    QDeclarativeProperty::PropertyTypeCategory propertyTypeCategory() const;
    const char *propertyTypeName() const;
    QString name() const;
    QVariant read() const;
    static QVariant read(QObject *, const QString &);
    static QVariant read(QObject *, const QString &, QDeclarativeContext *);
    static QVariant read(QObject *, const QString &, QDeclarativeEngine *);
    bool write(const QVariant &) const;
    static bool write(QObject *, const QString &, const QVariant &);
    static bool write(QObject *, const QString &, const QVariant &, QDeclarativeContext *);
    static bool write(QObject *, const QString &, const QVariant &, QDeclarativeEngine *);
    bool reset() const;
    bool hasNotifySignal() const;
    bool needsNotifySignal() const;
    bool connectNotifySignal(QObject *dest, SIP_PYOBJECT slot /TypeHint="QT_SLOT"/) const;
%MethodCode
        const char *slot = pyqt4_qtdeclarative_get_slot(a1);
        
        if (slot)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectNotifySignal(a0, slot);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(1, a1);
        }
%End

    bool connectNotifySignal(SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/) const;
%MethodCode
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt4_qtdeclarative_get_connection_parts(a0, 0, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectNotifySignal(receiver, slot_signature.constData());
            Py_END_ALLOW_THREADS
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

    bool connectNotifySignal(QObject *dest, int method) const;
    bool isWritable() const;
    bool isDesignable() const;
    bool isResettable() const;
    QObject *object() const;
    int index() const;
    QMetaProperty property() const;
    QMetaMethod method() const;
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp);
%End
};

%End

%ModuleHeaderCode
// Imports from QtCore.
typedef sipErrorState (*pyqt4_qtdeclarative_get_connection_parts_t)(PyObject *, QObject *, const char *, bool, QObject **, QByteArray &);
extern pyqt4_qtdeclarative_get_connection_parts_t pyqt4_qtdeclarative_get_connection_parts;

typedef const char *(*pyqt4_qtdeclarative_get_slot_t)(PyObject *);
extern pyqt4_qtdeclarative_get_slot_t pyqt4_qtdeclarative_get_slot;
%End

%ModuleCode
// Imports from QtCore.
pyqt4_qtdeclarative_get_connection_parts_t pyqt4_qtdeclarative_get_connection_parts;
pyqt4_qtdeclarative_get_slot_t pyqt4_qtdeclarative_get_slot;
%End

%PostInitialisationCode
// Imports from QtCore.
pyqt4_qtdeclarative_get_connection_parts = (pyqt4_qtdeclarative_get_connection_parts_t)sipImportSymbol("pyqt4_get_connection_parts");
Q_ASSERT(pyqt4_qtdeclarative_get_connection_parts);

pyqt4_qtdeclarative_get_slot = (pyqt4_qtdeclarative_get_slot_t)sipImportSymbol("pyqt4_get_slot");
Q_ASSERT(pyqt4_qtdeclarative_get_slot);
%End
